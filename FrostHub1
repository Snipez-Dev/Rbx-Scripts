-- Sicherer Service-Zugriff
local function safeService(serviceName)
    local ok, svc = pcall(function()
        return game:GetService(serviceName)
    end)
    return ok and svc or nil
end

local function safeFind(serviceName)
    local ok, svc = pcall(function()
        if game.FindService then
            return game:FindService(serviceName)
        end
    end)
    return ok and svc or nil
end

-- Services & Persistence (mit pcall Schutz)
local Players            = safeService("Players")
local RunService         = safeService("RunService")
local VirtualUser        = safeService("VirtualUser")
local UserInputService   = safeService("UserInputService")
local CoreGui            = safeService("CoreGui")
local ReplicatedFirst    = safeService("ReplicatedFirst")
local Workspace          = safeService("Workspace")
local TweenService       = safeService("TweenService")
local HttpService = game:GetService("HttpService")
local player             = Players and Players.LocalPlayer or nil
local playerGui          = player and player:FindFirstChild("PlayerGui") or nil
local VoiceChatService   = safeFind("VoiceChatService")

local function clearContainer(container)
    for _, gui in ipairs(container:GetChildren()) do
        if gui.Name == "FrostHubKRNL" then
            gui:Destroy()
        end
    end
end

-- Mobile-Resizer


clearContainer(CoreGui)

clearContainer(playerGui)

if type(gethui) == "function" then
    local gh = gethui()
    if gh then clearContainer(gh) end
end

-- Exploit file I/O
local isfile    = isfile
local readfile  = readfile
local writefile = writefile

-- Config persistence (default turquoise H=0.5,S=1,V=1)
local CONFIG_FILE = "FrostHub_config.json"
local config = { hue = 0.5, sat = 1, val = 1 }
if isfile and isfile(CONFIG_FILE) then
    local ok, data = pcall(function()
        return HttpService:JSONDecode(readfile(CONFIG_FILE))
    end)
    if ok and type(data)=="table" then
        config.hue = data.hue or config.hue
        config.sat = data.sat or config.sat
        config.val = data.val or config.val
    end
end
local hue, sat, val = config.hue, config.sat, config.val

-- Mobile detection
local isMobile = UserInputService.TouchEnabled and not UserInputService.MouseEnabled
local player = Players.LocalPlayer
-- Window settings
local BASE_W, BASE_H = 650, 300
local WIDTH  = BASE_W
local HEIGHT = BASE_H
local TOP_H  = 28
local START_POS = UDim2.new(0.15,0,0.2,20)

-- Colors & helper
local COLOR_BG        = Color3.fromRGB(18,18,18)
local COLOR_PANEL     = Color3.fromRGB(25,25,25)
local COLOR_SIDEBAR   = Color3.fromRGB(15,15,15)
local COLOR_HIGHLIGHT = Color3.fromHSV(hue,sat,val)
local COLOR_TEXT      = Color3.fromRGB(220,220,220)
local COLOR_SUCCESS   = Color3.fromRGB(34,197,94)
local COLOR_WARNING   = Color3.fromRGB(251,191,36)
local COLOR_ERROR     = Color3.fromRGB(239,68,68)

local sliderFills    = {}
local highlightTexts = {}
local tabButtons     = {}
local activeTab      = "Menu"
if isMobile then
    -- Fenstergröße kleiner machen
    WIDTH  = math.floor(BASE_W * 0.75)  -- z. B. 75% der Originalbreite
    HEIGHT = math.floor(BASE_H * 0.75)  -- 75% der Originalhöhe

    -- Startposition weiter zentrieren
    START_POS = UDim2.new(0.2, 0, 0.25, 0)

    -- Standard-Textgröße reduzieren
    local function scaleText(obj)
        if obj:IsA("TextLabel") or obj:IsA("TextButton") then
            obj.TextSize = math.max(12, math.floor(obj.TextSize * 0.85))
        end
        for _, child in ipairs(obj:GetChildren()) do
            scaleText(child)
        end
    end

    -- Später nach dem GUI-Aufbau ausführen
    task.defer(function()
        scaleText(screenGui)
    end)
end
local function round(obj, r)
    local c = Instance.new("UICorner", obj)
    c.CornerRadius = UDim.new(0, r or 4)
    return c
end

-- Save config
local function saveConfig()
    if writefile then
        config.hue, config.sat, config.val = hue, sat, val
        writefile(CONFIG_FILE, HttpService:JSONEncode(config))
    end
end

-- Refresh UI: recolor sliders, text, active tab
local function refreshUI()
    COLOR_HIGHLIGHT = Color3.fromHSV(hue, sat, val)
    for _, f in ipairs(sliderFills) do
        f.BackgroundColor3 = COLOR_HIGHLIGHT
    end
    for _, t in ipairs(highlightTexts) do
        t.TextColor3 = COLOR_HIGHLIGHT
    end
    if tabButtons[activeTab] then
        tabButtons[activeTab].TextColor3 = COLOR_HIGHLIGHT
    end
    saveConfig()
end

-- Rainbow cycle
local function startRainbow()
    rainbowConn = RunService.RenderStepped:Connect(function(dt)
        hue = (hue + dt*0.1) % 1
        refreshUI()
    end)
end
local function stopRainbow()
    if rainbowConn then
        rainbowConn:Disconnect()
        rainbowConn = nil
    end
end

-- Notifications
local notificationFrame
local function createNotificationSystem()
    local gui = Instance.new("ScreenGui",
        (type(gethui)=="function" and gethui()) or CoreGui)
    gui.Name = "NotificationSystem"; gui.ResetOnSpawn = false
    gui.IgnoreGuiInset = true; gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    notificationFrame = Instance.new("Frame", gui)
    notificationFrame.Size = UDim2.new(0,300,1,0)
    notificationFrame.Position = UDim2.new(1,-320,0,20)
    notificationFrame.BackgroundTransparency = 1

    local layout = Instance.new("UIListLayout", notificationFrame)
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding    = UDim.new(0,8)
end

local function showNotification(title, msg, typ, dur)
    if not notificationFrame then createNotificationSystem() end
    dur = dur or 3
    local color = COLOR_HIGHLIGHT
    if typ=="success" then color = COLOR_SUCCESS
    elseif typ=="warning" then color = COLOR_WARNING
    elseif typ=="error"   then color = COLOR_ERROR end

    local frame = Instance.new("Frame", notificationFrame)
    frame.Size = UDim2.new(1,0,0,80)
    frame.BackgroundColor3 = COLOR_PANEL; frame.BorderSizePixel = 0
    round(frame,8)

    local accent = Instance.new("Frame", frame)
    accent.Size = UDim2.new(0,4,1,0); accent.BackgroundColor3 = color
    round(accent,8)

    local t = Instance.new("TextLabel", frame)
    t.Text = title; t.Font = Enum.Font.GothamBold
    t.TextSize = 16; t.TextColor3 = color
    t.BackgroundTransparency = 1
    t.Position = UDim2.new(0,16,0,8); t.Size = UDim2.new(1,-32,0,20)
    t.TextXAlignment = Enum.TextXAlignment.Left

    local m = Instance.new("TextLabel", frame)
    m.Text = msg; m.Font = Enum.Font.Gotham
    m.TextSize = 14; m.TextColor3 = COLOR_TEXT
    m.BackgroundTransparency = 1
    m.Position = UDim2.new(0,16,0,32); m.Size = UDim2.new(1,-32,0,40)
    m.TextXAlignment = Enum.TextXAlignment.Left
    m.TextYAlignment = Enum.TextYAlignment.Top
    m.TextWrapped = true

    task.delay(dur, function()
        local tween = TweenService:Create(frame,
            TweenInfo.new(0.3), {
                Position = UDim2.new(1,50,0,0),
                BackgroundTransparency = 1
            })
        tween:Play()
        tween.Completed:Connect(function() frame:Destroy() end)
    end)
end
player.Idled:Connect(function()

    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new(0,0))
end)

spawn(function()
    while true do
        wait(60)  -- alle 60 Sekunden
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new(0,0))
    end
end)
-- Build GUI
local screenGui = Instance.new("ScreenGui",
    (type(gethui)=="function" and gethui()) or CoreGui)
screenGui.Name = "FrostHubKRNL"; screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true; screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local main = Instance.new("Frame", screenGui)
main.Size = UDim2.new(0,WIDTH,0,HEIGHT)
main.Position = START_POS
main.BackgroundColor3 = COLOR_BG
round(main,6)
main.ClipsDescendants = false

-- Top Bar
local topBar = Instance.new("Frame", main)
topBar.Size = UDim2.new(1,0,0,TOP_H)
topBar.BackgroundTransparency = 1

local titleLbl = Instance.new("TextLabel", topBar)
titleLbl.Text = "FrostHub - Universal v5.0.0"
titleLbl.Font = Enum.Font.GothamBold
titleLbl.TextSize =  16
titleLbl.TextColor3 = COLOR_HIGHLIGHT
titleLbl.BackgroundTransparency = 1
titleLbl.Position = UDim2.new(0,-44,0,0)
titleLbl.Size = UDim2.new(0,300,1,0)
table.insert(highlightTexts, titleLbl)

local btnMin = Instance.new("TextButton", topBar)
btnMin.Text = "_"; btnMin.Font = Enum.Font.GothamBold
btnMin.TextSize =  20
btnMin.TextColor3 = COLOR_HIGHLIGHT
btnMin.BackgroundTransparency = 1
btnMin.Size = UDim2.new(0,28,0,TOP_H)
btnMin.Position = UDim2.new(1,-60,0,0)
table.insert(highlightTexts, btnMin)

local btnClose = Instance.new("TextButton", topBar)
btnClose.Text = "X"; btnClose.Font = Enum.Font.GothamBold
btnClose.TextSize =  18
btnClose.TextColor3 = COLOR_HIGHLIGHT
btnClose.BackgroundTransparency = 1
btnClose.Size = UDim2.new(0,28,0,TOP_H)
btnClose.Position = UDim2.new(1,-32,0,0)
table.insert(highlightTexts, btnClose)

-- Draggable
do
    local dragging, dragInput, dragStart, startPos
    topBar.InputBegan:Connect(function(i)
        if i.UserInputType==Enum.UserInputType.MouseButton1 then
            dragging, dragStart, startPos = true, i.Position, main.Position
            i.Changed:Connect(function()
                if i.UserInputState==Enum.UserInputState.End then dragging=false end
            end)
        end
    end)
    topBar.InputChanged:Connect(function(i)
        if i.UserInputType==Enum.UserInputType.MouseMovement then
            dragInput = i
        end
    end)
    UserInputService.InputChanged:Connect(function(i)
        if dragging and i==dragInput then
            local delta = i.Position - dragStart
            main.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end)
end

local minimized = false
local lastMiniPos = START_POS
local miniFrame

btnMin.MouseButton1Click:Connect(function()
if not minimized then
    minimized = true
    main.Visible = false

    miniFrame = Instance.new("Frame", screenGui)
    miniFrame.Name = "Mini ❄️"
    miniFrame.Size = UDim2.new(0, 50, 0, 50)
    miniFrame.Position = lastMiniPos
    miniFrame.BackgroundColor3 = COLOR_BG
    miniFrame.BorderSizePixel = 0
    miniFrame.Active = true
    round(miniFrame, 4)

    local icon = Instance.new("TextLabel", miniFrame)
    icon.Text = "❄️"
    icon.Font = Enum.Font.GothamBold
    icon.TextSize =  28
    icon.TextColor3 = COLOR_HIGHLIGHT
    icon.BackgroundTransparency = 1
    icon.Size = UDim2.new(1, 0, 1, 0)
    icon.TextXAlignment = Enum.TextXAlignment.Center
    icon.TextYAlignment = Enum.TextYAlignment.Center

    local dragging, dragInput, dragStart, startPos, moved = false, nil, nil, nil, false

    miniFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            moved = false
            dragStart = input.Position
            startPos = miniFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                    lastMiniPos = miniFrame.Position
                end
            end)
        end
    end)

    miniFrame.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            if not moved and (math.abs(delta.X) > 5 or math.abs(delta.Y) > 5) then
                moved = true
            end
            miniFrame.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end)

    miniFrame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            if not moved then
                minimized = false
                miniFrame:Destroy()
                main.Visible = true
                btnMin.Text = "_"
            end
        end
    end)

    btnMin.Text = "⬆"
    showNotification("FrostHub", "GUI minimized", "info", 2)
end
end)

btnClose.MouseButton1Click:Connect(function()
    screenGui:Destroy()
end)





-- Sidebar & Tabs
local sidebar = Instance.new("Frame", main)
sidebar.Size = UDim2.new(0,100,1,-TOP_H)
sidebar.Position = UDim2.new(0,0,0,TOP_H)
sidebar.BackgroundColor3 = COLOR_SIDEBAR
round(sidebar,4)

local tabNames = {"Menu","Voice Chat","Local","Script","Server","SUS","Settings"}
for i,name in ipairs(tabNames) do
    local b = Instance.new("TextButton", sidebar)
    b.Name = name.."Tab"; b.Text = name
    b.Font = Enum.Font.Gotham; b.TextSize =  16
    b.TextColor3 = COLOR_TEXT
    b.BackgroundTransparency = 1
    b.Size = UDim2.new(1,0,0,32)
    b.Position = UDim2.new(0,0,0,(i-1)*36)
    tabButtons[name] = b
end

local content = Instance.new("Frame", main)
content.Size = UDim2.new(1,-100,1,-TOP_H)
content.Position = UDim2.new(0,100,0,TOP_H)
content.BackgroundColor3 = COLOR_PANEL
round(content,4)

local pages = {}
for _,name in ipairs(tabNames) do
    local p = Instance.new("Frame", content)
    p.Name = name.."Page"; p.Size = UDim2.new(1,0,1,0)
    p.BackgroundTransparency = 1; p.Visible = false
    pages[name] = p
end

local function showPage(name)
    activeTab = name
    for t,p in pairs(pages) do p.Visible = (t==name) end
    for t,b in pairs(tabButtons) do
        b.TextColor3 = (t==name) and COLOR_HIGHLIGHT or COLOR_TEXT
    end
end

-- === MENU TAB ===
do
    local p = pages.Menu
    local left = Instance.new("Frame", p)
    left.Size = UDim2.new(0,300,0,110)
    left.Position = UDim2.new(0,16,0,16)
    left.BackgroundColor3 = COLOR_SIDEBAR
    round(left,8)

    local avatar = Instance.new("ImageLabel", left)
    avatar.Size = UDim2.new(0,64,0,64)
    avatar.Position = UDim2.new(0,16,0,16)
    avatar.BackgroundTransparency = 1
    round(avatar,32)
    spawn(function()
        avatar.Image = Players:GetUserThumbnailAsync(
            player.UserId,
            Enum.ThumbnailType.HeadShot,
            Enum.ThumbnailSize.Size100x100
        )
    end)

    local offsetX = (64) + 24
    local nameLbl = Instance.new("TextLabel", left)
    nameLbl.Text = player.Name; nameLbl.Font = Enum.Font.GothamBold
    nameLbl.TextSize =  20; nameLbl.TextColor3 = COLOR_HIGHLIGHT
    nameLbl.BackgroundTransparency = 1
    nameLbl.Position = UDim2.new(0,offsetX,0,16)
    nameLbl.Size = UDim2.new(0,180,0,24)
    table.insert(highlightTexts, nameLbl)

    local verLbl = Instance.new("TextLabel", left)
    verLbl.Text = "Version: v5.0.0"; verLbl.Font = Enum.Font.Gotham
    verLbl.TextSize =  14; verLbl.TextColor3 = COLOR_HIGHLIGHT
    verLbl.BackgroundTransparency = 1
    verLbl.Position = UDim2.new(0,offsetX,0,44)
    verLbl.Size = UDim2.new(0,180,0,18)
    table.insert(highlightTexts, verLbl)

   local joinBtn = Instance.new("TextButton", left)
joinBtn.Text = "Join Discord"
joinBtn.Font = Enum.Font.GothamBold
joinBtn.TextSize = 16
joinBtn.TextColor3 = COLOR_HIGHLIGHT
joinBtn.BackgroundColor3 = COLOR_SIDEBAR
joinBtn.Size = UDim2.new(1, -88, 0, 30)
joinBtn.Position = UDim2.new(0, 74, 0, 74)
round(joinBtn, 6)
table.insert(highlightTexts, joinBtn)

joinBtn.MouseButton1Click:Connect(function()
    if typeof(setclipboard) == "function" then
        setclipboard("https://discord.gg/Ab73VVR4JK")
        showNotification("Discord", "Discord link copied to clipboard!", "success", 3)
    else
        showNotification("Discord", "Clipboard function not supported!", "error", 3)
    end
end)


    local right = Instance.new("Frame", p)
    right.Size = UDim2.new(0,200,0, 110)
    right.Position = UDim2.new(1,-216,0,16)
    right.BackgroundColor3 = COLOR_SIDEBAR
    round(right,8)

    local fpsLbl = Instance.new("TextLabel", right)
    fpsLbl.Text = "FPS: 0"; fpsLbl.Font = Enum.Font.Gotham
    fpsLbl.TextSize =  16; fpsLbl.TextColor3 = COLOR_HIGHLIGHT
    fpsLbl.BackgroundTransparency = 1
    fpsLbl.Position = UDim2.new(0,6,0, 20)
    fpsLbl.Size = UDim2.new(1,-16,0,20)
    table.insert(highlightTexts, fpsLbl)

    local pingLbl = Instance.new("TextLabel", right)
    pingLbl.Text = "Ping: 0 ms"; pingLbl.Font = Enum.Font.Gotham
    pingLbl.TextSize =  16; pingLbl.TextColor3 = COLOR_HIGHLIGHT
    pingLbl.BackgroundTransparency = 1
    pingLbl.Position = UDim2.new(0,8,0, 48)
    pingLbl.Size = UDim2.new(1,-16,0,20)
    table.insert(highlightTexts, pingLbl)

local unlockBtn = Instance.new("TextButton", right)
unlockBtn.Text = "Unlock FPS"
unlockBtn.Font = Enum.Font.GothamBold
unlockBtn.TextSize = 16
unlockBtn.TextColor3 = COLOR_HIGHLIGHT
unlockBtn.BackgroundColor3 = COLOR_SIDEBAR
unlockBtn.Size = UDim2.new(1, -16, 0,  30)
unlockBtn.Position = UDim2.new(0, 8, 0,  74)
round(unlockBtn, 6)
table.insert(highlightTexts, unlockBtn)

unlockBtn.MouseButton1Click:Connect(function()
    if typeof(setfpscap) == "function" then
        setfpscap(9999)
        showNotification("Performance", "FPS unlocked", "success", 2)
    else
        showNotification("Performance", "setfpscap not supported", "error", 2)
    end
end)

    local logLbl = Instance.new("TextLabel", p)
    logLbl.Text = "Changelog:\n- New UI\n- New Bypasses\n- Added New functions\n- Added protections V2\n- New Notify\n- Fixed old broken functions"
    logLbl.Font = Enum.Font.Gotham
    logLbl.TextSize = 14
    logLbl.TextColor3 = COLOR_HIGHLIGHT
    logLbl.TextXAlignment = Enum.TextXAlignment.Left
    logLbl.TextYAlignment = Enum.TextYAlignment.Top
    logLbl.BackgroundColor3 = COLOR_SIDEBAR
    logLbl.Position = UDim2.new(0,16,0, 136)
    logLbl.Size = UDim2.new(1,-32,0, 120)
    round(logLbl,8)
    table.insert(highlightTexts, logLbl)

    RunService.RenderStepped:Connect(function(dt)
        fpsLbl.Text = "FPS: "..math.floor(1/dt)
    end)
    task.spawn(function()
        while task.wait(1) do
            pingLbl.Text = "Ping: "..math.floor(player:GetNetworkPing()*1000).." ms"
        end
    end)
end

-- === VOICE CHAT TAB ===
do
    local p = pages["Voice Chat"]
    local btn = Instance.new("TextButton", p)
    btn.Text = "Voice Chat"; btn.Font = Enum.Font.GothamBold
    btn.TextSize =  16; btn.TextColor3 = COLOR_HIGHLIGHT
    btn.BackgroundColor3 = COLOR_SIDEBAR
    btn.Size = UDim2.new(1,-32,0, 30)
    btn.Position = UDim2.new(0,16,0,16)
    round(btn,6)
    table.insert(highlightTexts, btn)
    btn.MouseButton1Click:Connect(function()
        if VoiceChatService and VoiceChatService.joinVoice then
            VoiceChatService:joinVoice()
        else
            showNotification("VoiceChat","Not available","error",3)
        end
    end)
end
-- === LOCAL TAB ===
do
    local p                = pages.Local
    local Players          = game:GetService("Players")
    local RunService       = game:GetService("RunService")
    local UserInputService = game:GetService("UserInputService")
    local player           = Players.LocalPlayer

    -- ensure highlight registries exist (used across tabs)
    highlightTexts = highlightTexts or {}              -- any instance that should use TextColor3 = COLOR_HIGHLIGHT
    local highlightActiveBoxes = {}                   -- checkbox buttons that should adopt COLOR_HIGHLIGHT when ON
    local sliderFills = {}                            -- slider fill bars that use COLOR_HIGHLIGHT

    -- Scrolling container (no visible scrollbar)
    local scroll = Instance.new("ScrollingFrame", p)
    scroll.Size                       = UDim2.new(1, 0, 1, 0)
    scroll.Position                   = UDim2.new(0, 0, 0, 0)
    scroll.BackgroundTransparency     = 1
    scroll.AutomaticCanvasSize        = Enum.AutomaticSize.Y
    scroll.ScrollBarThickness         = 0
    scroll.ScrollBarImageTransparency = 1

    local canvasY = 16
    local spacing = 8
    local pad     = 8

    -- Slider helper
    local function makeSlider(text, min, max, default, y, callback)
        local h =  30
        local frame = Instance.new("Frame", scroll)
        frame.Size             = UDim2.new(1, -32, 0, h)
        frame.Position         = UDim2.new(0, 16, 0, y)
        frame.BackgroundColor3 = COLOR_SIDEBAR
        round(frame, 6)

        local lbl = Instance.new("TextLabel", frame)
        lbl.Text                   = text .. ": " .. default
        lbl.Font                   = Enum.Font.Gotham
        lbl.TextSize               = 14
        lbl.TextColor3             = COLOR_HIGHLIGHT
        lbl.BackgroundTransparency = 1
        lbl.Position               = UDim2.new(0, 8, 0, 0)
        lbl.Size                   = UDim2.new(1, 0, 0, 16)
        lbl.TextXAlignment         = Enum.TextXAlignment.Left
        table.insert(highlightTexts, lbl)

        local bg = Instance.new("Frame", frame)
        bg.Size                 = UDim2.new(1, -16, 0, 8)
        bg.Position             = UDim2.new(0, 8, 0, 20)
        bg.BackgroundColor3     = COLOR_BG
        round(bg, 4)

        local fill = Instance.new("Frame", bg)
        fill.Size               = UDim2.new((default - min)/(max - min), 0, 1, 0)
        fill.BackgroundColor3   = COLOR_HIGHLIGHT
        round(fill, 4)
        table.insert(sliderFills, fill)

        local function update(x)
            local rel = math.clamp(x - bg.AbsolutePosition.X, 0, bg.AbsoluteSize.X)
            local v   = math.floor(min + (rel/bg.AbsoluteSize.X)*(max-min) + 0.5)
            lbl.Text  = text .. ": " .. v
            fill.Size = UDim2.new((v-min)/(max-min), 0, 1, 0)
            callback(v)
        end

        bg.InputBegan:Connect(function(i)
            if i.UserInputType == Enum.UserInputType.MouseButton1 then
                update(i.Position.X)
                local conn = UserInputService.InputChanged:Connect(function(m)
                    if m.UserInputType == Enum.UserInputType.MouseMovement then
                        update(m.Position.X)
                    end
                end)
                UserInputService.InputEnded:Connect(function(e)
                    if e.UserInputType == Enum.UserInputType.MouseButton1 then
                        conn:Disconnect()
                    end
                end)
            end
        end)

        return h
    end

    -- Checkbox helper
    local function makeCheckbox(text, default, y, callback)
        local h = 30
        local frame = Instance.new("Frame", scroll)
        frame.Size             = UDim2.new(1, -32, 0, h)
        frame.Position         = UDim2.new(0, 16, 0, y)
        frame.BackgroundColor3 = COLOR_SIDEBAR
        round(frame, 6)

        local box = Instance.new("TextButton", frame)
        box.Size               = UDim2.new(0, 24, 0, 24)
        box.Position           = UDim2.new(1, -30, 0, (h-24)/2)
        box.BackgroundColor3   = default and COLOR_HIGHLIGHT or COLOR_BG
        box.Text               = ""
        box.AutoButtonColor    = false
        round(box, 4)

        local mark = Instance.new("Frame", box)
        mark.Size                   = UDim2.new(1,0,1,0)
        mark.BackgroundColor3       = COLOR_BG
        mark.BackgroundTransparency = default and 1 or 0
        round(mark, 4)

        -- register this checkbox so it re-tints to new COLOR_HIGHLIGHT when toggled on
        table.insert(highlightActiveBoxes, box)

        local lbl = Instance.new("TextLabel", frame)
        lbl.Text                   = text
        lbl.Font                   = Enum.Font.Gotham
        lbl.TextSize               = 14
        lbl.TextColor3             = COLOR_HIGHLIGHT
        lbl.BackgroundTransparency = 1
        lbl.Position               = UDim2.new(0, 8, 0, 0)
        lbl.Size                   = UDim2.new(1, -38, 1, 0)
        lbl.TextXAlignment         = Enum.TextXAlignment.Left
        table.insert(highlightTexts, lbl)

        box.MouseButton1Click:Connect(function()
            local state = not (mark.BackgroundTransparency == 1)
            mark.BackgroundTransparency = state and 1 or 0
            box.BackgroundColor3       = state and COLOR_HIGHLIGHT or COLOR_BG
            callback(state)
        end)

        if default then callback(default) end
        return h, frame
    end

    -- State vars
    local flySpeed       = 50
    local espDraws, espConn = {}, nil
    local noclipConn, jumpConn, flyConn, flyBG, flyBV
    local flyHotkey = Enum.KeyCode.F
    local flyState = false

    -- Speed
    do
        local h = makeSlider("Speed", 16, 500, 16, canvasY, function(v)
            if player.Character then
                player.Character.Humanoid.WalkSpeed = v
            end
        end)
        canvasY = canvasY + h + spacing
    end

    -- Jump Height
    do
        local humanoid  = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
        local defaultJH = humanoid and math.floor(humanoid.JumpHeight + 0.5) or 7
        if defaultJH < 7 then defaultJH = 7 end
        local h = makeSlider("Jump Height", 7, 400, defaultJH, canvasY, function(v)
            if player.Character then
                local intValue = math.floor(v + 0.5)
                player.Character:FindFirstChildOfClass("Humanoid").JumpHeight = math.max(intValue, 7)
            end
        end)
        canvasY = canvasY + h + spacing
    end

    -- ESP
    do
        local updateInterval = 1/40 -- ESP nur 40 FPS updaten
        local lastUpdate = 0
        local espObjects = {} -- Speichert alle Drawings pro Spieler

        local function clearESP()
            for _, objs in pairs(espObjects) do
                for _, obj in ipairs(objs) do
                    pcall(obj.Remove, obj)
                end
            end
            espObjects = {}
        end

        local function getSegments(rigType)
            if rigType == Enum.HumanoidRigType.R15 then
                return {
                    {"Head","UpperTorso"},{"UpperTorso","LowerTorso"},
                    {"LowerTorso","LeftUpperLeg"},{"LeftUpperLeg","LeftLowerLeg"},{"LeftLowerLeg","LeftFoot"},
                    {"LowerTorso","RightUpperLeg"},{"RightUpperLeg","RightLowerLeg"},{"RightLowerLeg","RightFoot"},
                    {"UpperTorso","LeftUpperArm"},{"LeftUpperArm","LeftLowerArm"},{"LeftLowerArm","LeftHand"},
                    {"UpperTorso","RightUpperArm"},{"RightUpperArm","RightLowerArm"},{"RightLowerArm","RightHand"},
                }
            else -- R6 korrekt gefixt
                return {
                    {"Head","Torso"},
                    {"Torso","Left Arm"},{"Left Arm","LeftHand"},
                    {"Torso","Right Arm"},{"Right Arm","RightHand"},
                    {"Torso","Left Leg"},{"Left Leg","LeftFoot"},
                    {"Torso","Right Leg"},{"Right Leg","RightFoot"},
                }
            end
        end

        local h = makeCheckbox("ESP", false, canvasY, function(on)
            if on then
                espConn = RunService.RenderStepped:Connect(function(dt)
                    lastUpdate += dt
                    if lastUpdate < updateInterval then return end
                    lastUpdate = 0

                    local cam = workspace.CurrentCamera
                    -- Erst alle Zeichnungen unsichtbar setzen
                    for _, objs in pairs(espObjects) do
                        for _, obj in ipairs(objs) do
                            obj.Visible = false
                        end
                    end

                    for _, plr in ipairs(Players:GetPlayers()) do
                        if plr ~= player and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                            local hum = plr.Character:FindFirstChildOfClass("Humanoid")
                            local rig = hum and hum.RigType or Enum.HumanoidRigType.R6
                            local head = plr.Character:FindFirstChild("Head")

                            if head then
                                local pos, vis = cam:WorldToViewportPoint(head.Position + Vector3.new(0, .5, 0))
                                if vis then
                                    -- Falls keine Drawings existieren → erstellen
                                    if not espObjects[plr] then
                                        espObjects[plr] = {}
                                        local nameText = Drawing.new("Text")
                                        nameText.Size = 16
                                        nameText.Center = true
                                        nameText.Outline = true
                                        nameText.Color = Color3.new(1, 1, 1)
                                        table.insert(espObjects[plr], nameText)
                                        for _ = 1, #getSegments(rig) do
                                            local line = Drawing.new("Line")
                                            line.Thickness = 1
                                            line.Transparency = 1
                                            line.Color = Color3.new(1, 1, 1)
                                            table.insert(espObjects[plr], line)
                                        end
                                    end
                                    -- Erstes Objekt = Name
                                    local nameText = espObjects[plr][1]
                                    nameText.Visible = true
                                    nameText.Text = plr.Name
                                    nameText.Position = Vector2.new(pos.X, pos.Y)

                                    -- Segmente zeichnen
                                    local segs = getSegments(rig)
                                    local idx = 2
                                    for _, seg in ipairs(segs) do
                                        local a, b = plr.Character:FindFirstChild(seg[1]), plr.Character:FindFirstChild(seg[2])
                                        if a and b then
                                            local pA, vA = cam:WorldToViewportPoint(a.Position)
                                            local pB, vB = cam:WorldToViewportPoint(b.Position)
                                            if vA and vB then
                                                local ln = espObjects[plr][idx]
                                                ln.Visible = true
                                                ln.From = Vector2.new(pA.X, pA.Y)
                                                ln.To = Vector2.new(pB.X, pB.Y)
                                            end
                                        end
                                        idx += 1
                                    end
                                end
                            end
                        end
                    end
                end)
                showNotification("Local","ESP enabled","success",2)
            else
                if espConn then espConn:Disconnect(); espConn = nil end
                clearESP()
                showNotification("Local","ESP disabled","info",2)
            end
        end)
        canvasY = canvasY + h + spacing
    end

    -- Noclip
    do
        local h = makeCheckbox("Noclip", false, canvasY, function(on)
            if on then
                noclipConn = RunService.Stepped:Connect(function()
                    if player.Character then
                        for _, part in ipairs(player.Character:GetDescendants()) do
                            if part:IsA("BasePart") then part.CanCollide = false end
                        end
                    end
                end)
                showNotification("Local","Noclip enabled","success",2)
            else
                if noclipConn then noclipConn:Disconnect(); noclipConn = nil end
                if player.Character then
                    for _, part in ipairs(player.Character:GetDescendants()) do
                        if part:IsA("BasePart") then part.CanCollide = true end
                    end
                end
                showNotification("Local","Noclip disabled","info",2)
            end
        end)
        canvasY = canvasY + h + spacing
    end

    -- Infinite Jump
    do
        local h = makeCheckbox("Infinite Jump", false, canvasY, function(on)
            if on then
                jumpConn = UserInputService.JumpRequest:Connect(function()
                    local hum = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
                    if hum then hum:ChangeState(Enum.HumanoidStateType.Jumping) end
                end)
                showNotification("Local","Infinite Jump enabled","success",2)
            else
                if jumpConn then jumpConn:Disconnect(); jumpConn = nil end
                showNotification("Local","Infinite Jump disabled","info",2)
            end
        end)
        canvasY = canvasY + h + spacing
    end

    -- Fly + Hotkey + Fly Speed
    do
        local noclipConn
        local flyCheckboxBox, flyCheckboxMark
        local function enableNoclip()
            if noclipConn then return end
            noclipConn = RunService.Stepped:Connect(function()
                if player.Character then
                    for _, part in pairs(player.Character:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        end
        local function disableNoclip()
            if noclipConn then
                noclipConn:Disconnect()
                noclipConn = nil
            end
        end
       -- Key-Status für Fly
local flyKeys = {
    W = false,
    A = false,
    S = false,
    D = false,
    Space = false,
    Shift = false
}
if game.PlaceId == 136162036182779 then
    local autoSpinEnabled = false

    -- UI-Toggle (Button) für Auto Spin
    local h, autoSpinFrame = makeCheckbox("Auto Spin (German Voice)", false, canvasY, function(val)
        autoSpinEnabled = val
        if val then
            showNotification("Local","Auto Spin enabled","success",2)
        else
            showNotification("Local","Auto Spin disabled","info",2)
        end
    end)
    canvasY = canvasY + h + spacing

    -- Referenzen für Spinner und Prompt
    local spinnerModel  = workspace:WaitForChild("SpinnerGames")
                                  :WaitForChild("Game")
                                  :WaitForChild("Button")
    local spinnerPart   = spinnerModel:WaitForChild("Button")
    local spinnerPrompt = spinnerPart:WaitForChild("ProximityPrompt")

    -- Prompt ohne Hold
    spinnerPrompt.HoldDuration = 0

    -- Trigger-Funktion für Auto Spin
    local function triggerAutoSpin()
        if not autoSpinEnabled then return end

        -- HumanoidRootPart holen (warten, falls nötig)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if not hrp then
            player.CharacterAdded:Wait()
            hrp = player.Character:WaitForChild("HumanoidRootPart")
        end

        -- 20 schnelle Durchläufe ohne Pause
        for i = 1, 20 do
            -- teleport zum Spinner
            hrp.CFrame = CFrame.new(spinnerPart.Position + Vector3.new(0, 3, 0))
            -- Prompt auslösen
            spinnerPrompt:InputHoldBegin()
            spinnerPrompt:InputHoldEnd()
        end
    end

    -- bei jeder Anzeige des Prompts triggern
    spinnerPrompt.PromptShown:Connect(triggerAutoSpin)

    -- Backup-Loop: dauerhaft alle 0.1 Sekunden prüfen und triggern
    spawn(function()
        while screenGui.Parent do
            if autoSpinEnabled then
                triggerAutoSpin()
            end
            task.wait(0.1)
        end
    end)
end
-- Key-Tracker
UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    local key = input.KeyCode
    if key == Enum.KeyCode.W then flyKeys.W = true end
    if key == Enum.KeyCode.A then flyKeys.A = true end
    if key == Enum.KeyCode.S then flyKeys.S = true end
    if key == Enum.KeyCode.D then flyKeys.D = true end
    if key == Enum.KeyCode.Space then flyKeys.Space = true end
    if key == Enum.KeyCode.LeftShift then flyKeys.Shift = true end
end)

UserInputService.InputEnded:Connect(function(input)
    local key = input.KeyCode
    if key == Enum.KeyCode.W then flyKeys.W = false end
    if key == Enum.KeyCode.A then flyKeys.A = false end
    if key == Enum.KeyCode.S then flyKeys.S = false end
    if key == Enum.KeyCode.D then flyKeys.D = false end
    if key == Enum.KeyCode.Space then flyKeys.Space = false end
    if key == Enum.KeyCode.LeftShift then flyKeys.Shift = false end
end)

local function setFly(state)
    flyState = state
    -- Checkbox visuell aktualisieren
    if flyCheckboxMark and flyCheckboxBox then
        flyCheckboxMark.BackgroundTransparency = state and 1 or 0
        flyCheckboxBox.BackgroundColor3 = state and COLOR_HIGHLIGHT or COLOR_BG
    end
    if state and player.Character then
        local hrp = player.Character:FindFirstChild("HumanoidRootPart")
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if hrp and humanoid then
            humanoid.PlatformStand = true
            enableNoclip()
            flyBG = Instance.new("BodyGyro", hrp)
            flyBV = Instance.new("BodyVelocity", hrp)
            flyBG.P         = 1e4
            flyBG.MaxTorque = Vector3.new(1e5, 1e5, 1e5)
            flyBV.MaxForce  = Vector3.new(1e5, 1e5, 1e5)
            flyBG.CFrame    = workspace.CurrentCamera.CFrame
            flyConn = RunService.RenderStepped:Connect(function()
                local cam = workspace.CurrentCamera.CFrame
                local dir = Vector3.new()
                if flyKeys.W then dir += cam.LookVector end
                if flyKeys.S then dir -= cam.LookVector end
                if flyKeys.A then dir -= cam.RightVector end
                if flyKeys.D then dir += cam.RightVector end
                if flyKeys.Space then dir += Vector3.new(0, 1, 0) end
                if flyKeys.Shift then dir -= Vector3.new(0, 1, 0) end
                flyBV.Velocity = (dir.Magnitude > 0 and dir.Unit * flySpeed or Vector3.new())
                hrp.CFrame = CFrame.lookAt(hrp.Position, hrp.Position + cam.LookVector)
                flyBG.CFrame = cam
            end)
            showNotification("Local","Fly enabled","success",2)
        end
    else
        if flyConn then flyConn:Disconnect(); flyConn = nil end
        if flyBG then flyBG:Destroy(); flyBG = nil end
        if flyBV then flyBV:Destroy(); flyBV = nil end
        disableNoclip()
        local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then humanoid.PlatformStand = false end
        showNotification("Local","Fly disabled","info",2)
    end
end

        -- Checkbox (Referenzen speichern)
        local h, flyCheckboxFrame = makeCheckbox("Fly", false, canvasY, function(on)
            setFly(on)
        end)
        flyCheckboxBox = flyCheckboxFrame:FindFirstChildOfClass("TextButton")
        flyCheckboxMark = flyCheckboxBox and flyCheckboxBox:FindFirstChildOfClass("Frame")
        canvasY = canvasY + h + spacing

        -- Hotkey Button
        local hotkeyBtn = Instance.new("TextButton", scroll)
        hotkeyBtn.Size = UDim2.new(1, -32, 0, 30)
        hotkeyBtn.Position = UDim2.new(0, 16, 0, canvasY)
        hotkeyBtn.BackgroundColor3 = COLOR_SIDEBAR
        hotkeyBtn.TextColor3 = COLOR_HIGHLIGHT
        hotkeyBtn.Font = Enum.Font.Gotham
        hotkeyBtn.TextSize = 14
        hotkeyBtn.Text = "Fly Hotkey: " .. flyHotkey.Name
        round(hotkeyBtn, 6)
        table.insert(highlightTexts, hotkeyBtn) -- keep text color in sync with COLOR_HIGHLIGHT

        local waitingForKey = false
        hotkeyBtn.MouseButton1Click:Connect(function()
            hotkeyBtn.Text = "Press any key..."
            waitingForKey = true
        end)
        UserInputService.InputBegan:Connect(function(input, gp)
            if waitingForKey and input.UserInputType == Enum.UserInputType.Keyboard then
                flyHotkey = input.KeyCode
                hotkeyBtn.Text = "Fly Hotkey: " .. flyHotkey.Name
                waitingForKey = false
            elseif not gp and input.KeyCode == flyHotkey then
                setFly(not flyState)
            end
        end)
        canvasY = canvasY + 30 + spacing

        -- Fly Speed
        local h2 = makeSlider("Fly Speed", 0, 500, flySpeed, canvasY, function(v)
            flySpeed = v
        end)
        canvasY = canvasY + h2 + spacing
    end

    -- Players dropdown & Spectate
    do
        local ddH = 30
        local function listHeight() return #Players:GetPlayers() * (ddH + 2) + ddH + 2 end
        local miniH = pad + ddH + pad
        local ddContainer = Instance.new("Frame", scroll)
        ddContainer.Size             = UDim2.new(1, -32, 0, miniH)
        ddContainer.Position         = UDim2.new(0, 16, 0, canvasY)
        ddContainer.BackgroundColor3 = COLOR_SIDEBAR
        ddContainer.BorderSizePixel  = 0
        round(ddContainer, 12)
        local header = Instance.new("TextButton", ddContainer)
        header.Size                   = UDim2.new(1, -2*pad, 0, ddH)
        header.Position               = UDim2.new(0, pad, 0, pad)
        header.Text                   = "Select Player  ▶"
        header.Font                   = Enum.Font.Gotham
        header.TextSize               =  16
        header.TextColor3             = COLOR_HIGHLIGHT
        header.BackgroundTransparency = 1
        table.insert(highlightTexts, header) -- keep header text in sync with COLOR_HIGHLIGHT

        local listFrame = Instance.new("Frame", ddContainer)
        listFrame.Position               = UDim2.new(0, pad, 0, pad + ddH + 2)
        listFrame.BackgroundTransparency = 1
        round(listFrame, 8)
        listFrame.Visible = false
        local selectedPlayer
        local specH, specFrame = makeCheckbox("Spectate", false, 0, function(on)
            if on and selectedPlayer and selectedPlayer.Character then
                local hum = selectedPlayer.Character:FindFirstChildOfClass("Humanoid")
                if hum then workspace.CurrentCamera.CameraSubject = hum end
            else
                local myHum = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
                if myHum then workspace.CurrentCamera.CameraSubject = myHum end
            end
        end)
        specFrame.Parent   = ddContainer
        specFrame.Visible  = false
        specFrame.Size     = UDim2.new(1, -2*pad, 0, specH)
        local function rebuildList()
            listFrame:ClearAllChildren()
            for i, plr in ipairs(Players:GetPlayers()) do
                local btn = Instance.new("TextButton", listFrame)
                btn.Position       = UDim2.new(0, 0, 0, (i-1)*(ddH+2))
                btn.Size           = UDim2.new(1, 0, 0, ddH)
                btn.Text           = plr.Name
                btn.Font           = Enum.Font.Gotham
                btn.TextSize       =  16
                btn.TextColor3     = COLOR_HIGHLIGHT
                btn.BackgroundColor3 = COLOR_SIDEBAR
                btn.BorderSizePixel  = 0
                round(btn, 6)
                table.insert(highlightTexts, btn) -- keep list item text in sync with COLOR_HIGHLIGHT
                btn.MouseButton1Click:Connect(function()
                    selectedPlayer = plr
                    header.Text = "Selected: " .. plr.Name .. "  ▶"
                end)
            end
            local hList = listHeight()
            listFrame.Size = UDim2.new(1, -2*pad, 0, hList)
            local specY = pad + ddH + 2 + hList + spacing
            specFrame.Position = UDim2.new(0, pad, 0, specY)
            local fullH = specY + specH + pad
            ddContainer.Size = UDim2.new(1, -32, 0, fullH)
        end
        header.MouseButton1Click:Connect(function()
            local open = not listFrame.Visible
            if open then rebuildList() end
            listFrame.Visible = open
            specFrame.Visible = open
            if not open then
                ddContainer.Size = UDim2.new(1, -32, 0, miniH)
            end
            header.Text = open
                and (selectedPlayer and "Selected: " .. selectedPlayer.Name .. "  ▼" or "Select Player  ▼")
                or  (selectedPlayer and "Selected: " .. selectedPlayer.Name .. "  ▶" or "Select Player  ▶")
        end)
        Players.PlayerAdded:Connect(function()
            if listFrame.Visible then rebuildList() end
        end)
        Players.PlayerRemoving:Connect(function(leaver)
            if selectedPlayer == leaver then
                selectedPlayer = nil
                local myHum = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
                if myHum then workspace.CurrentCamera.CameraSubject = myHum end
                local box = specFrame:FindFirstChildOfClass("TextButton")
                if box then
                    box.BackgroundColor3 = COLOR_BG
                    local mark = box:FindFirstChildOfClass("Frame")
                    if mark then mark.BackgroundTransparency = 0 end
                end
                header.Text = "Select Player  ▶"
            end
            if listFrame.Visible then rebuildList() end
        end)
        canvasY = canvasY + (pad + ddH + 2 + listHeight() + spacing + specH + pad) + spacing
    end

    ----------------------------------------------------------------
    -- DYNAMIC COLOR UPDATER (keeps Select Player text + Fly Hotkey +
    -- all other registered labels/slider fills/checked boxes in sync)
    ----------------------------------------------------------------
    do
        local lastH, lastS, lastV = hue, sat, val
        RunService.Heartbeat:Connect(function()
            if hue ~= lastH or sat ~= lastS or val ~= lastV then
                COLOR_HIGHLIGHT = Color3.fromHSV(hue, sat, val)

                -- update every registered label/button text color
                for i = #highlightTexts, 1, -1 do
                    local inst = highlightTexts[i]
                    if inst and inst.Parent ~= nil then
                        pcall(function() inst.TextColor3 = COLOR_HIGHLIGHT end)
                    else
                        table.remove(highlightTexts, i) -- clean up
                    end
                end

                -- update slider fills color
                for i = #sliderFills, 1, -1 do
                    local fill = sliderFills[i]
                    if fill and fill.Parent ~= nil then
                        pcall(function() fill.BackgroundColor3 = COLOR_HIGHLIGHT end)
                    else
                        table.remove(sliderFills, i)
                    end
                end

                -- re-tint any ON checkboxes
                for i = #highlightActiveBoxes, 1, -1 do
                    local box = highlightActiveBoxes[i]
                    if box and box.Parent ~= nil then
                        local mark = box:FindFirstChildOfClass("Frame")
                        if mark and mark.BackgroundTransparency == 1 then
                            pcall(function() box.BackgroundColor3 = COLOR_HIGHLIGHT end)
                        end
                    else
                        table.remove(highlightActiveBoxes, i)
                    end
                end

                lastH, lastS, lastV = hue, sat, val
            end
        end)
    end
end

do
    local p = pages.Settings

    -- Hintergrundcontainer (wie im Menu-Tab)
    local bgFrame = Instance.new("Frame", p)
    bgFrame.Size = UDim2.new(1,-32,1,-32)
    bgFrame.Position = UDim2.new(0,16,0,16)
    bgFrame.BackgroundColor3 = COLOR_SIDEBAR
    round(bgFrame,8)

    -- Colorpicker Fläche (Saturation/Value)
    local area = Instance.new("Frame", bgFrame)
    area.Size = UDim2.new(1,-32,0.6,0)
    area.Position = UDim2.new(0,16,0,16)
    area.BackgroundColor3 = Color3.fromHSV(hue,1,1)
    area.BorderSizePixel = 0
    round(area,6)
    area.ClipsDescendants = true

    local white = Instance.new("Frame", area)
    white.Size = UDim2.new(1,0,1,0)
    white.BackgroundColor3 = Color3.new(1,1,1)
    local gradW = Instance.new("UIGradient", white)
    gradW.Rotation = 0
    gradW.Color = ColorSequence.new(Color3.new(1,1,1), area.BackgroundColor3)
    gradW.Transparency = NumberSequence.new{
        NumberSequenceKeypoint.new(0,0),
        NumberSequenceKeypoint.new(1,1),
    }

    local black = Instance.new("Frame", area)
    black.Size = UDim2.new(1,0,1,0)
    black.BackgroundColor3 = Color3.new(0,0,0)
    local gradB = Instance.new("UIGradient", black)
    gradB.Rotation = 90
    gradB.Transparency = NumberSequence.new{
        NumberSequenceKeypoint.new(0,1),
        NumberSequenceKeypoint.new(1,0),
    }

    local handle = Instance.new("Frame", area)
    handle.Size = UDim2.new(0,16,0,16)
    handle.Position = UDim2.new(sat,-8,1-val,-8)
    handle.BackgroundColor3 = Color3.new(1,1,1)
    round(handle,8)

    local draggingSV = false
    area.InputBegan:Connect(function(i)
        if i.UserInputType==Enum.UserInputType.MouseButton1 then
            draggingSV = true
            local function upd(p)
                local rx = math.clamp(p.X-area.AbsolutePosition.X,0,area.AbsoluteSize.X)
                local ry = math.clamp(p.Y-area.AbsolutePosition.Y,0,area.AbsoluteSize.Y)
                sat = rx/area.AbsoluteSize.X
                val = 1-(ry/area.AbsoluteSize.Y)
                handle.Position = UDim2.new(sat,-8,1-val,-8)
                refreshUI()
            end
            upd(i.Position)
            local conn
            conn = UserInputService.InputChanged:Connect(function(m)
                if draggingSV then upd(m.Position) end
            end)
            UserInputService.InputEnded:Connect(function(e)
                if e.UserInputType==Enum.UserInputType.MouseButton1 then
                    draggingSV=false; conn:Disconnect()
                end
            end)
        end
    end)

    -- Hue Slider (hellere Farben)
    local slider = Instance.new("Frame", bgFrame)
    slider.Size = UDim2.new(1,-32,0,14)
    slider.Position = UDim2.new(0,16,0.75,0)
    slider.BackgroundColor3 = COLOR_BG
    slider.BorderSizePixel = 0
    round(slider,6)
    slider.ClipsDescendants = true

    local hueGrad = Instance.new("UIGradient", slider)
    hueGrad.Rotation = 0
    hueGrad.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0,  Color3.fromHSV(0,1,1)),
        ColorSequenceKeypoint.new(0.17,Color3.fromHSV(0.17,1,1)),
        ColorSequenceKeypoint.new(0.33,Color3.fromHSV(0.33,1,1)),
        ColorSequenceKeypoint.new(0.50,Color3.fromHSV(0.50,1,1)),
        ColorSequenceKeypoint.new(0.67,Color3.fromHSV(0.67,1,1)),
        ColorSequenceKeypoint.new(0.83,Color3.fromHSV(0.83,1,1)),
        ColorSequenceKeypoint.new(1,  Color3.fromHSV(1,1,1)),
    }

    local sHandle = Instance.new("Frame", slider)
    sHandle.Size = UDim2.new(0,16,0,16)
    sHandle.Position = UDim2.new(hue,-8,0,-1)
    sHandle.BackgroundColor3 = Color3.new(1,1,1)
    round(sHandle,8)

    local draggingH = false
    slider.InputBegan:Connect(function(i)
        if i.UserInputType==Enum.UserInputType.MouseButton1 then
            draggingH = true
            local function upd(x)
                local rx = math.clamp(x-slider.AbsolutePosition.X,0,slider.AbsoluteSize.X)
                hue = rx/slider.AbsoluteSize.X
                local bgCol = Color3.fromHSV(hue,1,1)
                area.BackgroundColor3 = bgCol
                gradW.Color = ColorSequence.new(Color3.new(1,1,1),bgCol)
                sHandle.Position = UDim2.new(hue,-8,0,-1)
                refreshUI()
            end
            upd(i.Position.X)
        end
    end)
    UserInputService.InputChanged:Connect(function(i)
        if draggingH and i.UserInputType==Enum.UserInputType.MouseMovement then
            local rx = math.clamp(i.Position.X-slider.AbsolutePosition.X,0,slider.AbsoluteSize.X)
            hue = rx/slider.AbsoluteSize.X
            local bgCol = Color3.fromHSV(hue,1,1)
            area.BackgroundColor3 = bgCol
            gradW.Color = ColorSequence.new(Color3.new(1,1,1),bgCol)
            sHandle.Position = UDim2.new(hue,-8,0,-1)
            refreshUI()
        end
    end)
    UserInputService.InputEnded:Connect(function(i)
        if i.UserInputType==Enum.UserInputType.MouseButton1 then draggingH=false end
    end)

    -- Rainbow Mode Toggle
    local rmFrame = Instance.new("Frame", bgFrame)
    rmFrame.Size     = UDim2.new(1,-32,0,30)
    rmFrame.Position = UDim2.new(0,16,0.85,0)
    rmFrame.BackgroundTransparency = 1

    local rmLbl = Instance.new("TextLabel", rmFrame)
    rmLbl.Text           = "Rainbow Mode"
    rmLbl.Font           = Enum.Font.Gotham
    rmLbl.TextSize       = 14
    rmLbl.TextColor3     = COLOR_HIGHLIGHT
    rmLbl.BackgroundTransparency = 1
    rmLbl.Position       = UDim2.new(0,0,0,0)
    rmLbl.Size           = UDim2.new(1,-38,1,0)
    rmLbl.TextXAlignment = Enum.TextXAlignment.Left
    table.insert(highlightTexts, rmLbl)

    local rmBox = Instance.new("TextButton", rmFrame)
    rmBox.Size             = UDim2.new(0,24,0,24)
    rmBox.Position         = UDim2.new(1,-26,0.5,0)
    rmBox.AnchorPoint      = Vector2.new(0,0.5)
    rmBox.BackgroundColor3 = COLOR_BG
    rmBox.Text             = ""
    rmBox.AutoButtonColor  = false
    round(rmBox,4)

    local rainbowConn
    rmBox.MouseButton1Click:Connect(function()
        rainbowEnabled = not rainbowEnabled
        if rainbowEnabled then
            rmBox.BackgroundColor3 = COLOR_HIGHLIGHT
            rainbowConn = RunService.RenderStepped:Connect(function(dt)
                hue = (hue + dt * 0.1) % 1
                local bgCol = Color3.fromHSV(hue,1,1)
                area.BackgroundColor3 = bgCol
                gradW.Color = ColorSequence.new(Color3.new(1,1,1),bgCol)
                sHandle.Position = UDim2.new(hue,-8,0,-1)
                refreshUI()
            end)
            showNotification("Rainbow","mode on","success",2)
        else
            if rainbowConn then rainbowConn:Disconnect() rainbowConn=nil end
            rmBox.BackgroundColor3 = COLOR_BG
            showNotification("Rainbow","mode off","info",2)
        end
    end)
end



-- === SCRIPT TAB ===
do
    local p = pages.Script
    local scripts = {
        {name="Infinite Yield", url="https://raw.githubusercontent.com/edgeiy/infiniteyield/master/source"},
        {name="Open GUI",       url="https://raw.githubusercontent.com/Snipez-Dev/Rbx-Scripts/refs/heads/main/Open%20Gui"},
        {name="Simple spy v3",  url="https://raw.githubusercontent.com/78n/SimpleSpy/main/SimpleSpyBeta.lua"},
        {name="Dark Dex",       url="https://raw.githubusercontent.com/infyiff/backup/main/dex.lua"},
        {name="AK Admin",       url="https://angelical.me/ak.lua"},
        {name="Clear Chat",     url="https://raw.githubusercontent.com/Snipez-Dev/Rbx-Scripts/refs/heads/main/Clearchat"},
    }
    for i,e in ipairs(scripts) do
        local btn = Instance.new("TextButton", p)
        btn.Text = e.name; btn.Font = Enum.Font.GothamBold
        btn.TextSize =  16; btn.TextColor3 = COLOR_HIGHLIGHT
        btn.BackgroundColor3 = COLOR_SIDEBAR
        btn.Size = UDim2.new(1,-32,0, 30)
        btn.Position = UDim2.new(0,16,0,16+(i-1)*(40))
        round(btn,6)
        table.insert(highlightTexts, btn)
        btn.MouseButton1Click:Connect(function()
            loadstring(game:HttpGet(e.url,true))()
        end)
    end
end

-- === SUS TAB ===
do
    local p = pages.SUS
    local function getRig()
        local c = player.Character or player.CharacterAdded:Wait()
        local h = c:FindFirstChildOfClass("Humanoid")
        return (h and h.RigType==Enum.HumanoidRigType.R15) and "r15" or "r6"
    end
    local rig = getRig()
    local data = {
        {name="Bang V2",    r6="https://pastebin.com/raw/aPSHMV6K", r15="https://pastebin.com/raw/1ePMTt9n"},
        {name="Get Banged", r6="https://pastebin.com/raw/zHbw7ND1", r15="https://pastebin.com/raw/7hvcjDnW"},
        {name="Suck",       r6="https://pastebin.com/raw/SymCfnAW", r15="https://pastebin.com/raw/p8yxRfr4"},
        {name="Get Suc",    r6="https://pastebin.com/raw/FPu4e2Qh", r15="https://pastebin.com/raw/DyPP2tAF"},
        {name="Jerk",       r6="https://pastefy.app/wa3v2Vgm/raw", r15="https://pastefy.app/YZoglOyJ/raw"},
    }
    for i,e in ipairs(data) do
        local btn = Instance.new("TextButton", p)
        btn.Text = e.name.." ("..string.upper(rig)..")"
        btn.Font = Enum.Font.GothamBold
        btn.TextSize =  16
        btn.TextColor3 = COLOR_HIGHLIGHT
        btn.BackgroundColor3 = COLOR_SIDEBAR
        btn.Size = UDim2.new(1,-32,0, 30)
        btn.Position = UDim2.new(0,16,0,16+(i-1)*( 40))
        round(btn,6)
        table.insert(highlightTexts, btn)
        btn.MouseButton1Click:Connect(function()
            local url = (rig=="r15") and e.r15 or e.r6
            loadstring(game:HttpGet(url,true))()
        end)
    end
end

-- === SERVER TAB ===
do
    local p                   = pages.Server
    local joinTime            = tick()
    local TeleportService     = game:GetService("TeleportService")
    local LocalizationService = game:GetService("LocalizationService")
    local Players             = game:GetService("Players")
    local RunService          = game:GetService("RunService")
    local player              = Players.LocalPlayer

    -- Asynchrone Region-Abfrage
    local region = "Unknown"
    spawn(function()
        local ok, res = pcall(function()
            return LocalizationService:GetCountryRegionForPlayerAsync(player)
        end)
        if ok and res then
            region = res
        end
    end)

    -- Layout-Parameter
    local labelH    = 20
    local btnH      =  30
    local pad       = 8
    -- Höhe so berechnen, dass 5 Labels + Button + Paddings reinpassen
    local boxHeight = (labelH + pad) * 5 + btnH + pad * 2

    -- Hintergrund-Box (automatisch volle Breite minus 16px Ränder links & rechts)
    local box = Instance.new("Frame")
    box.Name               = "ServerInfoBox"
    box.Parent             = p
    box.Size               = UDim2.new(1, -32, 0, boxHeight)
    box.Position           = UDim2.new(0, 16, 0, 16)
    box.BackgroundColor3   = COLOR_SIDEBAR
    box.BorderSizePixel    = 0
    round(box, 8)

    -- Hilfsfunktion für Labels
    local function makeLabel(text, row)
        local lbl = Instance.new("TextLabel", box)
        lbl.Text                   = text
        lbl.Font                   = Enum.Font.Gotham
        lbl.TextSize               =  16
        lbl.TextColor3             = COLOR_HIGHLIGHT
        lbl.BackgroundTransparency = 1
        lbl.Size                   = UDim2.new(1, -2*pad, 0, labelH)
        lbl.Position               = UDim2.new(0, pad, 0, pad + (row-1)*(labelH + pad))
        table.insert(highlightTexts, lbl)
        return lbl
    end

    -- Labels erzeugen
    local langLbl    = makeLabel("Region: "   .. region,            1)
    local playersLbl = makeLabel("Players: "  .. #Players:GetPlayers(), 2)
    local timeLbl    = makeLabel("Playtime: 00:00:00",            3)
    local placeLbl   = makeLabel("PlaceID: "  .. tostring(game.PlaceId), 4)
    local jobLbl     = makeLabel("JobID: "    .. tostring(game.JobId),  5)

    -- Live-Updates
    RunService.RenderStepped:Connect(function()
        playersLbl.Text = "Players: " .. #Players:GetPlayers()
        local elapsed   = tick() - joinTime
        timeLbl.Text    = string.format(
            "Playtime: %02d:%02d:%02d",
            math.floor(elapsed/3600),
            math.floor((elapsed%3600)/60),
            math.floor(elapsed%60)
        )
        langLbl.Text    = "Region: " .. region
    end)

    -- Rejoin-Button zentriert in der Box
    local rejoinBtn = Instance.new("TextButton", box)
    rejoinBtn.Text             = "Rejoin Server"
    rejoinBtn.Font             = Enum.Font.GothamBold
    rejoinBtn.TextSize         =  16
    rejoinBtn.TextColor3       = COLOR_HIGHLIGHT
    rejoinBtn.BackgroundColor3 = COLOR_SIDEBAR
    rejoinBtn.BorderSizePixel  = 0
    rejoinBtn.Size             = UDim2.new(0, 200, 0, btnH)
    rejoinBtn.Position         = UDim2.new(0.5, -100, 1, -btnH - pad)
    round(rejoinBtn, 6)
    table.insert(highlightTexts, rejoinBtn)
    rejoinBtn.MouseButton1Click:Connect(function()
        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, player)
    end)
end



-- Initial page & events
showPage("Menu")
for name, btn in pairs(tabButtons) do
    btn.MouseButton1Click:Connect(function()
        showPage(name)
    end)
end
 
